/**
 * Arquivo responsável por gerar o feed rss do blog.
 */
import { getAllPosts, promisify } from '../Utils'
const RSS = require('rss')
const fs = require('fs')

const site_url = 'https://www.iagobruno.com'

async function main() {
  try {
    await getAllPosts(Infinity, false)
      .then(savePostsData)
      .then(generateFeedRSS)
      .then(saveRSS)

    console.info('Feed RSS criado e salvo com sucesso!')
  }
  catch (err) {
    console.error('Erro ao criar feed RSS:', err)
  }
}

type PostItem = {
  [key: string]: any
}
type PostsList = Array<PostItem>

/**
 * Gerar um feed rss com a lista de posts recebida.
 * @see https://www.npmjs.com/package/rss
 */
async function generateFeedRSS(posts: PostsList): Promise<string> {
  const feed = new RSS({
    title: 'Blog pessoal de Iago Bruno',
    // description: '',
    site_url,
    language: 'pt-BR'
  })

  posts.forEach(item => {
    let { title, publishDate, slug, summary } = item

    feed.item({
      title,
      date: publishDate,
      url: `${site_url}/posts/${slug}`,
      description: summary,
      author: 'Iago Bruno'
    })
  })

  return feed.xml({ indent: true })
}

/**
 * Salvar as postagens em um arquivo .js para servir como cache de solicitações posteriores.
 */
async function savePostsData(posts: PostsList): Promise<PostsList> {
  const path = './posts-data.js'
  const content = `
    /** Generated by build-rss-feed.ts file */
    module.exports = ${JSON.stringify(posts)}
  `
  const error = await promisify(fs.writeFile, [path, content])

  if (error) throw new Error('Erro ao salvar arquivo posts-data.js. ' + error)

  return posts
}

/**
 * Salvar o arquivo gerado.
 */
async function saveRSS(rssXML: string) {
  const path = './static/rss-feed.xml'
  const error = await promisify(fs.writeFile, [path, rssXML])

  if (error) throw new Error('Erro ao salvar arquivo. ' + error)

  return 'success'
}

// START!
main();
